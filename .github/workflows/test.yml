name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Run flake8
      run: |
        flake8 --max-line-length=100 --exclude=venv,env,__pycache__ --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional .
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json
        bandit -r . -x tests/
      continue-on-error: true
    
    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libmagic
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -r requirements.txt
    
    - name: Verify installation
      run: |
        python -c "import app; print('App import successful')"
        python -c "import crypto.symmetric; print('Crypto import successful')"
        python -c "import utils.validators; print('Utils import successful')"
    
    - name: Run unit tests
      run: |
        python run_tests.py unit
    
    - name: Run integration tests
      run: |
        python run_tests.py integration
    
    - name: Run quick tests with coverage
      run: |
        pytest tests/ -m "not slow and not performance" --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance benchmarks
      run: |
        python run_tests.py performance
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance_report.json

  security:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run security tests
      run: |
        python run_tests.py security
    
    - name: Run additional security checks
      run: |
        # Check for hardcoded secrets
        grep -r "password.*=" . --exclude-dir=.git --exclude-dir=venv --exclude-dir=env || true
        grep -r "secret.*=" . --exclude-dir=.git --exclude-dir=venv --exclude-dir=env || true
        grep -r "key.*=" . --exclude-dir=.git --exclude-dir=venv --exclude-dir=env || true

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t uep-test .
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name uep-test-container -p 5000:5000 uep-test
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        docker stop uep-test-container

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt
    
    - name: Generate API documentation
      run: |
        python -c "
        import json
        import app
        test_app = app.create_app()
        with test_app.app_context():
            # Generate API documentation
            pass
        "

  report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [lint, test, performance, security]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test report
      run: |
        echo "# Test Results Summary" > test-report.md
        echo "" >> test-report.md
        echo "## Job Status" >> test-report.md
        echo "- Lint: ${{ needs.lint.result }}" >> test-report.md
        echo "- Tests: ${{ needs.test.result }}" >> test-report.md
        echo "- Performance: ${{ needs.performance.result }}" >> test-report.md
        echo "- Security: ${{ needs.security.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Artifacts" >> test-report.md
        echo "- Security reports available in artifacts" >> test-report.md
        echo "- Performance results available in artifacts" >> test-report.md
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: test-report.md